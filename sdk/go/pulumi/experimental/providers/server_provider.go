// Copyright 2016-2023, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "generate"; DO NOT EDIT.

//nolint:lll
package providers

import (
	"context"

	pulumirpc "github.com/pulumi/pulumi/sdk/v3/proto/go"
	codegenrpc "github.com/pulumi/pulumi/sdk/v3/proto/go/codegen"
)

// Internal server interface to implement the Provider interface.
type providerServer struct {
	pulumirpc.UnimplementedResourceProviderServer

	server Provider
}

func NewProviderServer(server Provider) pulumirpc.ResourceProviderServer {
	return &providerServer{server: server}
}

func (c *providerServer) CheckConfig(ctx context.Context, request CheckRequest) (CheckResponse, error) {
	resp, err := c.server.CheckConfig(ctx, request.marshal())
	if err != nil {
		return nil, err
	}
	rv := CheckResponse{}
	rv.unmarshal(resp)
	return err, rv
}

func (c *providerServer) DiffConfig(ctx context.Context, request DiffRequest) (DiffResponse, error) {
	resp, err := c.server.DiffConfig(ctx, request.marshal())
	if err != nil {
		return nil, err
	}
	rv := DiffResponse{}
	rv.unmarshal(resp)
	return err, rv
}

func (c *providerServer) Configure(ctx context.Context, request ConfigureRequest) (ConfigureResponse, error) {
	resp, err := c.server.Configure(ctx, request.marshal())
	if err != nil {
		return nil, err
	}
	rv := ConfigureResponse{}
	rv.unmarshal(resp)
	return err, rv
}

func (c *providerServer) Check(ctx context.Context, request CheckRequest) (CheckResponse, error) {
	resp, err := c.server.Check(ctx, request.marshal())
	if err != nil {
		return nil, err
	}
	rv := CheckResponse{}
	rv.unmarshal(resp)
	return err, rv
}

func (c *providerServer) Diff(ctx context.Context, request DiffRequest) (DiffResponse, error) {
	resp, err := c.server.Diff(ctx, request.marshal())
	if err != nil {
		return nil, err
	}
	rv := DiffResponse{}
	rv.unmarshal(resp)
	return err, rv
}

func (c *providerServer) Create(ctx context.Context, request CreateRequest) (CreateResponse, error) {
	resp, err := c.server.Create(ctx, request.marshal())
	if err != nil {
		return nil, err
	}
	rv := CreateResponse{}
	rv.unmarshal(resp)
	return err, rv
}

func (c *providerServer) Update(ctx context.Context, request UpdateRequest) (UpdateResponse, error) {
	resp, err := c.server.Update(ctx, request.marshal())
	if err != nil {
		return nil, err
	}
	rv := UpdateResponse{}
	rv.unmarshal(resp)
	return err, rv
}

func (c *providerServer) Delete(ctx context.Context, request DeleteRequest) error {
	resp, err := c.server.Delete(ctx, request.marshal())
	if err != nil {
		return err
	}
	return err
}

func (c *providerServer) Read(ctx context.Context, request ReadRequest) (ReadResponse, error) {
	resp, err := c.server.Read(ctx, request.marshal())
	if err != nil {
		return nil, err
	}
	rv := ReadResponse{}
	rv.unmarshal(resp)
	return err, rv
}
